(define prologue (read-contents (car (zepto:find-on-path "bwdc/prologue.js"))))

(define trans
  #{"+" "add"
    "*" "mult"
    "/" "div"
    "-" "sub"
    "++" "conj"
    "apply" "apply"
    "+=" "concat"})

(define (join args . joinr)
  (let ((joinr (get-from joinr 0 ", ")))
    (string:join args joinr)))

(define (collec val)
  (join (map codegen (val :value))))

(define (dict-key str)
  (if (not (alleq? (car str) #\" (last str)))
    (++ "\"" str "\"")
    str))

(define (dict val)
  (join (map ($ (++ (dict-key (codegen (car %))) ": " (codegen (cadr %))))
             (val :value))))

(define (to-camel name)
  (let ((to-replace (regex:groups r/(-\w)/ name)))
    (if (null? to-replace)
      name
      (reduce (lambda (str pattern)
                (string:substitute str (car pattern)
                                (->string (char:upper-case (cadar pattern)))))
              name
              to-replace))))

(define (no-interrobang str)
  (|> str
      ($ (if (string:ends-with str "!") (++ "unsafe" (but-last str)) str))
      ($ (if (string:ends-with str "?") (++ "is" (but-last str)) str))))

(define (rand-name)
  (++ "gen_" (->string (randint (pow 2 32)))))

(define (special-names name)
  (case name
    (("%") (rand-name))
    (else name)))

(define (function name)
  (let ((name (->string name)))
    (if (in? trans name)
      (++ "zepto." (trans name))
      (to-camel (no-interrobang (regex:gsub r/:/ "-" (special-names name)))))))

(define (fun-name fun)
  (let ((mkfun   (lambda (name) (make-hash :name name :type :fun)))
        (mkunkwn (lambda (name) (make-hash :name name :type :unknown)))
        (mkop    (lambda (name) (make-hash :name name :type :op)))
        (mktrans (lambda (fun)  (make-hash :fun  fun  :type :trans)))
        (mkpropc (lambda (name) (make-hash :name name :type :propc)))
        (mkprop  (lambda (name) (make-hash :name name :type :prop))))
    (case fun
      ((+) (mkop "+"))
      ((*) (mkop "*"))
      ((/) (mkop "/"))
      ((-) (mkop "-"))
      ((>) (mkop ">"))
      ((>=) (mkop ">="))
      ((<=) (mkop "<="))
      ((<) (mkop "<"))
      ((/= <>) (mkop "!="))
      ((++) (mkpropc "append"))
      ((+=) (mkpropc "extend"))
      ((make-simple-list) (mktrans ($ (++ "[" (string:join % ", ") "]"))))
      ((make-hash) (mktrans ($ (++ "new zepto.HashMap(" (string:join % ", ") ")"))))
      ((list) (mktrans ($ (++ "new zepto.List([" (string:join % ", ") "])"))))
      ((eqv?) (mkop "=="))
      ((eq? =) (mkop "==="))
      ((set!) (mkop "="))
      ((null? list:null?) (mkpropc "empty"))
      ((car head list:car) (mkpropc "car"))
      ((cdr tail list:cdr) (mkpropc "cdr"))
      ((->string) (mkpropc "toString"))
      ((length) (mkprop "length"))
      ((in?) (mkpropc "contains"))
      ((write) (mktrans ($ (++ "console.log((" (car %) ").toString())"))))
      ((newline) (mkfun "console.log"))
      ((display) (mktrans ($ (++ "process.stdout.write((" (car %) ").toString())"))))
      ((error) (mktrans ($ (++ "console.error((" (car %) ").toString())"))))
      (else (mkunkwn (function fun))))))

(define (arg-list args)
  (if (list? args)
    (let ((gen (map codegen args)))
      (if (any? ($ (eq? (% :type) :rest)) args)
        (++ (list:sublist gen 0 (- (length gen) 2))
            (++ "..." (list:last gen)))
        gen))
    (list (++ "..." (function (args :value))))))

(define (declare-if-rest-arg args)
  (if (and (list? args) (any? ($ (eq? (% :type) :rest)) args))
    (let ((gen (map codegen args)))
      (++ "var " (list:last gen) " = new zepto.List(" (list:last gen) ");\n"))
    ""))

(define (treat-app val)
  (let* ((fun (val :function))
         (args (arg-list (val :arguments)))
         (args-joined (join args)))
    (case (fun :type)
      ((:symbol)
        (let ((fun (fun-name (fun :value))))
          (case (fun :type)
            ((:fun)
              (++ (function (fun :name)) "(" args-joined ")"))
            ((:op)
              (string:join args (++ " " (fun :name) " ")))
            ((:prop)
              (++ (car args) "." (fun :name)))
            ((:propc)
              (++ (car args) "." (fun :name) "(" (join (cdr args)) ")"))
            ((:trans)
              ((fun :fun) args))
            ((:unknown)
              (++ (function (fun :name)) ".call(undefined"
                  (if (> (length args) 0) ", " "") args-joined ")"))
            (else
              (error:from-string
                (++ "Got a bad form in function application: " fun))))))
      ((:lambda :define-fun)
        (++ "(" (codegen fun) ")(" args-joined ")"))
      (else (++ (codegen fun) ".call(undefined"
                (if (> (length args) 0) ", " "") args-joined ")")))))

(define (codegen val)
  (case (val :type)
    ((:string :char) (++ "new zepto.Str(\"" (val :value) "\")"))
    ((:atom) (++ "\"" (cdr (->string (val :value))) "\""))
    ((:list :vector) (++ "new zepto.List([" (collec val) "])"))
    ((:hash-map) (++ "new zepto.HashMap({" (dict val) "})"))
    ((:byte-vector) (++ "new zepto.ByteVector([" (collec val) "])"))
    ((:complex)
      (error:from-string "Complex numbers are not supported by this backend"))
    ((:rational)
      (->string (* 1.0 (val :value))))
    ((:application) (treat-app val))
    ((:define-val)
      (++ "var " (function (->string (val :name))) " = "
          (codegen (val :binding)) ";"))
    ((:define-fn)
      (++ "function " (codegen (val :name))
          "(" (join (arg-list (val :arguments))) ") {\n"
            (declare-if-rest-arg (val :arguments))
            "return " (codegen (val :body)) ";\n"
          "}"))
    ((:seq)
      (let ((ins (map codegen (val :arguments))))
        (++ "(() => {\n"
              (join (list:but-last ins) ";\n") "\n"
              "return " (list:last ins) ";\n})()")))
    ((:lambda)
      (let ((args (arg-list (val :arguments))))
        (++ "(" (join args) ") => {\n" 
            (declare-if-rest-arg (val :arguments))
            "return " (codegen (val :body)) ";\n}")))
    ((:symbol) (function (val :value)))
    ((:regex) (++ "/" (regex:pattern (val :value)) "/"))
    ((:nil) "null")
    ((:if) (++ "(() => {\n"
               "if (" (codegen (val :cond)) ") {\n"
               "return " (codegen (val :then)) ";\n"
               "} else {\n"
               "return " (codegen (val :else)) ";\n"
               "}})()"))
    (else (->string (val :value)))))

(define conf (make-hash :definitions  prologue
                        :macro-expand #t))

(zepto:implements-codegen :js codegen conf)
(define res (catch-vm-error '(zepto:run-compiler :js)))

(if (error? res)
  (write res))
